{
	"info": {
		"_postman_id": "5b72552b-f27d-4557-877f-a013fcf4c6ba",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39763492",
		"_collection_link": "https://www.postman.com/yorsan/workspace/api-test-automation/collection/39763492-5b72552b-f27d-4557-877f-a013fcf4c6ba?action=share&source=collection_link&creator=39763492"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"companyCode\", \"RS\");\r",
							"const code=pm.globals.get(\"companyCode\");\r",
							"const val =pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"\r",
							"pm.collectionVariables.set(\"isbn\", code+val);\r",
							"pm.collectionVariables.set(\"author_name\",pm.iterationData.get(\"BookName\"));\r",
							"pm.collectionVariables.set(\"book_name\", pm.iterationData.get(\"AuthorName\"));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const JsonResponse = pm.response.json();\r",
							"var id=JsonResponse.ID;\r",
							"pm.collectionVariables.set(\"book_Id\", id);\r",
							"pm.environment.set(\"book_Id\", id);\r",
							"pm.test(\"Response to be 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"\t\tpm.expect(JsonResponse).have.property(\"Msg\");\r",
							"        pm.expect(JsonResponse.Msg).to.eql(\"successfully added\")\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Extract ID\", function()\r",
							"{  \r",
							"    \r",
							"    pm.response.to.have.jsonBody(\"ID\");\r",
							"});\r",
							"\r",
							"pm.test(\"ID Logic Validation\", function(){\r",
							"    let isbn_value=pm.collectionVariables.get(\"isbn\");\r",
							"    let jsonbody=JSON.parse(pm.request.body.raw);\r",
							"    let aisel_value=jsonbody.aisle;\r",
							"    let expected_id=isbn_value+aisel_value;\r",
							"pm.expect(expected_id).to.eql(id);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=UTF-8\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n\"name\":\"{{book_name}}\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"18\",\r\n\"author\":\"{{author_name}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate author name in Request body of Add book and is same as in Get book\", function()\r",
							"{\r",
							"    const JsonResponse = pm.response.json();\r",
							"    pm.expect(JsonResponse[0].author).to.eql(pm.collectionVariables.get(\"author_name\"));\r",
							"}\r",
							");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_Id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate the message\", function()\r",
							"{\r",
							"   const JsonBody= pm.response.json();\r",
							"   pm.expect(JsonBody.msg).to.eql(\"book is successfully deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n\"ID\" : \"{{book_Id}}\"\r\n \r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": ""
		},
		{
			"key": "book_Id",
			"value": ""
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		}
	]
}